// $ANTLR 3.5 C:\\Documents and Settings\\Admin\\Мои документы\\T.g 2013-03-03 01:15:00

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.runtime.debug.*;
import java.io.IOException;
@SuppressWarnings("all")
public class TParser extends DebugParser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ID", "'call'"
	};
	public static final int EOF=-1;
	public static final int T__5=5;
	public static final int ID=4;

	// delegates
	public Parser[] getDelegates() {
		return new Parser[] {};
	}

	// delegators


	public static final String[] ruleNames = new String[] {
		"invalidRule", "r"
	};

	public static final boolean[] decisionCanBacktrack = new boolean[] {
		false, // invalid decision
	};

 
	public int ruleLevel = 0;
	public int getRuleLevel() { return ruleLevel; }
	public void incRuleLevel() { ruleLevel++; }
	public void decRuleLevel() { ruleLevel--; }
	public TParser(TokenStream input) {
		this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
	}
	public TParser(TokenStream input, int port, RecognizerSharedState state) {
		super(input, state);
		DebugEventSocketProxy proxy =
			new DebugEventSocketProxy(this, port, null);

		setDebugListener(proxy);
		try {
			proxy.handshake();
		}
		catch (IOException ioe) {
			reportError(ioe);
		}
	}

	public TParser(TokenStream input, DebugEventListener dbg) {
		super(input, dbg, new RecognizerSharedState());
	}

	protected boolean evalPredicate(boolean result, String predicate) {
		dbg.semanticPredicate(result, predicate);
		return result;
	}

	@Override public String[] getTokenNames() { return TParser.tokenNames; }
	@Override public String getGrammarFileName() { return "C:\\Documents and Settings\\Admin\\Мои документы\\T.g"; }



	// $ANTLR start "r"
	// C:\\Documents and Settings\\Admin\\Мои документы\\T.g:6:1: r : 'call' ID ;
	public final void r() throws  {
		Token ID1=null;

		try { dbg.enterRule(getGrammarFileName(), "r");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(6, 0);

		try {
			// C:\\Documents and Settings\\Admin\\Мои документы\\T.g:6:5: ( 'call' ID )
			dbg.enterAlt(1);

			// C:\\Documents and Settings\\Admin\\Мои документы\\T.g:6:7: 'call' ID
			{
			dbg.location(6,7);
			match(input,5,FOLLOW_5_in_r53); dbg.location(6,14);
			ID1=(Token)match(input,ID,FOLLOW_ID_in_r55); dbg.location(6,17);
			System.out.print((ID1!=null?ID1.getText():null));
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(7, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "r");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "r"

	// Delegated rules



	public static final BitSet FOLLOW_5_in_r53 = new BitSet(new long[]{0x0000000000000010L});
	public static final BitSet FOLLOW_ID_in_r55 = new BitSet(new long[]{0x0000000000000002L});
}
