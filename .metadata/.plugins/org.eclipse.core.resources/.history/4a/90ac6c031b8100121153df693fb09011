package course2.ppvis.notepad;
import javax.jws.WebParam.Mode;
import javax.swing.*;
import org.w3c.dom.css.RGBColor;
import java.awt.*;
import java.util.*;
import java.awt.event.*;
import java.awt.image.*;


public class text_area extends JPanel {
	//Реализация класса каретки
	//
	public class Caret {
		private int line_number = 1;
		private int pos = 0;
		private int height = 14;
		private int x = 0;
		private int y = 0;
		public int getX(){ return x; }
		public int getY(){ return y; }
		public void setX(int x){this.x = x; }
		public void setY(int y){this.y = y; }
		public int getPos(){ return pos; }
		public int getLine(){
			int ln = 1, p = 0;
			while(p<pos){
				if(model.charAt(p)=='\n') ++ln;
				++p;
			}
			line_number = ln;
			return line_number;
		}
		public void setPos(int pos){ this.pos = (pos>=0)?pos:0; }
		public void setLine(int l){ line_number = l; }
		public void setHeight(int height){ this.height = height; }
		public int getHeight(){ return height; }
		public int getPosByX(int x, int y){
			return 1;
		} 
		
		public void setPosByLine(int l){

			int p = 0;
			int n = 1, _x = 0;
			int ln = 1;
			boolean status = false;
			
			try{
				
				while(p<model.length()){
					if(n!=getLine()){
						if(model.charAt(p)=='\n') ++n;
					} else {
						break;
					}
					++p;
				}
				while(p!=this.pos){
						_x+=fm.charWidth(model.charAt(p++))+1;
				}
				this.x = _x;				
							
				p = 0;
				n = 1;
				_x = 0;
				
				while(p<model.length()){
					if(n!=l){
						if(model.charAt(p)=='\n') ++n;
					} else {
						status = true;
						break;
					}
					++p;
				}
				if(status){
					while(_x<this.x){
						if(model.charAt(p)=='\n') break;
						_x+=fm.charWidth(model.charAt(p++))+1;
					}
					
				}
				this.pos = p;
				this.line_number = l;				
		
		}catch(Exception e){}
		}
	}
		
	
	
	private Caret caret = new Caret(); 					  //Каретка
	private char symbol[] = new char[1];                //Необработанные данные	
	private String model = "";							//Тектовая модель представления
	private int line = 1;
	private int pos = 0;
	private int x = 0;
	private int y = 10;
	private int line_width = 0;
	private Graphics g;	
	private int count = 0;
	private int line_height  = 14;
	private FontMetrics fm;
	private boolean ShiftIsDown = false;
	private int beg_selection_pos = -1, end_selection_pos = -1;
	
	public text_area(){
		key_event key_listen = new key_event();
		addKeyListener(key_listen);
		setBackground(new Color(250,250,250));
		setFocusable(true);
		//symbol[0] = ' '; 
	}
	
	public void paintComponent(Graphics g){
		this.g = g;
		fm = g.getFontMetrics();
		super.paintComponent(g);
		line_height = fm.getDescent()+fm.getAscent();
		//g.drawString(model, 100, 100);
		x = 0;
		line = 1;
		caret.setLine(1);
		line_width = 0;
	
		toView();
	}
	//Определение событий мыши
	//
	private class mouse_adapter extends MouseAdapter {
		public void mousePressed(MouseEvent event){
			
		}
		
		public void mouseClicked(MouseEvent event){
			
		}
	
	}
	
	private class mouse_motion implements MouseMotionListener{
		public void mouseMoved(MouseEvent event){
			
		}
		
		public void mouseDragged(MouseEvent event){
			
		}
	}
	
	private class key_event implements KeyListener {
		
		public void keyPressed(KeyEvent event){
			
			if(event.isShiftDown()&&!ShiftIsDown){
				ShiftIsDown = true;
				beg_selection_pos = caret.getPos();
			}
			
			switch(event.getKeyCode()){
				case KeyEvent.VK_ENTER:{
					++count;
					ShiftIsDown = false;
					try{
						if(caret.getPos()==model.length()){
							model+='\n';
						} else if(caret.getPos()<model.length()){
							String begin = model.substring(0, caret.getPos());
							String end = model.substring(caret.getPos(), model.length());
							model = begin +'\n'+ end;						
						}
					}catch(Exception e){}
					caret.setPos(caret.getPos()+1);
					
					break;
				}
				case KeyEvent.VK_BACK_SPACE: {
					ShiftIsDown = false;
					if(--count<0)count = 0;
					//if(caret.getPos()>count) caret.setPos(count);
					try{
						if(caret.getPos()==model.length()){
							model = model.substring(0, model.length()-1);
						}
						
						else if(caret.getPos()<model.length()){
							String begin = model.substring(0, caret.getPos()-1);
							String end = model.substring(caret.getPos(), model.length());
							model = begin + end;
						}
					} catch(Exception e){}
					caret.setPos(caret.getPos()-1);
					break;
				}
				case KeyEvent.VK_TAB:{
					model+='\r';
					break;
				}
				case KeyEvent.VK_LEFT:{
					if(caret.getPos()-1>=0)caret.setPos(caret.getPos()-1);
					sel_new_pos();
					break;
				}
				case KeyEvent.VK_RIGHT:{
					if(caret.getPos()+1<=count) caret.setPos(caret.getPos()+1);
					sel_new_pos();
					break;
				}
				case KeyEvent.VK_UP:{
					
					if(caret.getLine()>1){
						caret.setPosByLine(caret.getLine()-1);
					}
					sel_new_pos();
					break;
				}
				
				case KeyEvent.VK_DOWN:{
					
					if(caret.getLine()<line){
						caret.setPosByLine(caret.getLine()+1);
					}
					sel_new_pos();
					break;
				}
				case KeyEvent.VK_SHIFT:{break;}
				case KeyEvent.VK_CONTROL:{break;}
				case KeyEvent.VK_ALT:{break;}
				case KeyEvent.VK_CAPS_LOCK:{break;}
				default:{
					ShiftIsDown = false;
					if(!model.isEmpty()&&model.length()>caret.getPos()){
						String begin = model.substring(0, caret.getPos());
						String end = model.substring(caret.getPos(), model.length());
						model = begin+event.getKeyChar()+end;
					} else {
						model+=event.getKeyChar();
					}
					++count;
					caret.setPos(caret.getPos()+1);
				
				}
			}
			
			
			repaint();
		}
		public void keyReleased(KeyEvent event){
			if(event.getKeyCode()==KeyEvent.VK_SHIFT&&!ShiftIsDown){
				ShiftIsDown = false;
			}
		}
		
		public void keyTyped(KeyEvent event){
			
		}
		
	}
	
	private void sel_new_pos(){
		if(ShiftIsDown){
			end_selection_pos = caret.getPos();
		} else {
			end_selection_pos = -1;
			beg_selection_pos = -1;
		}
	}
	
	private void drawSelection(int step){
		g.setColor(Color.magenta);
		g.fillRect(x, line*line_height-10, step, 14);
		g.setColor(Color.black);
	}
	
	private void toView(){
		int i = 0;
		
		while(i<model.length()){
			symbol[0] = model.charAt(i);
			
			switch(model.charAt(i)){
				case '\n': {
					++line;
					caret.setLine(caret.getLine()+1);
					line_width = 0;
					x = 0;
					caret.setX(x);
					caret.setY((line-1)*line_height+5);
					break;
				}
				case '\r': {
					int step = 4*fm.charWidth(' ')+4;
					x+=step;
					line_width+=step;
					if(line_width>=getWidth()){
							++line;
							line_width = 0;
							x = 0;
					}
					break;
				}
				default:{
					int step = fm.charWidth(symbol[0])+1;
					line_width+=step;
					
					if(!(beg_selection_pos==-1||end_selection_pos==-1)){
						if(beg_selection_pos>end_selection_pos){
							if(i>=end_selection_pos&&i<=beg_selection_pos) drawSelection(step);
						} else if(i<=end_selection_pos&&i>=beg_selection_pos) drawSelection(step);
					}
					g.drawChars(symbol, 0, 1, x, line*(line_height));
					x+=step;
					caret.setX(x);
					caret.setY((line-1)*line_height+5);
				}
			}
			++i;
			if(i==caret.getPos()){
				g.drawLine(caret.getX(), caret.getY(), caret.getX(),caret.getY()+caret.getHeight());
			}
			
		}
	
	}
}



